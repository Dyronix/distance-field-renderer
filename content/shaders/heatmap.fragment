#version 330
#extension GL_ARB_separate_shader_objects : enable
precision highp int;
precision highp float;
precision highp sampler3D;

#define HIT_NOTHING             0
#define HIT_MAX_MARCH_DISTANCE  1
#define HIT_SURFACE             2

// ------------------- varying uniforms ---------------------
//
//  v_texcoord                      : vec2      - interpolated texture coodinate of the vertex
//  v_world_ray                     : vec4      - ray shot by this fragment, used to determine the "depth" of our distance function
//  v_camera_world                  : mat4      - world matrix of the camera
//  v_camera_view                   : mat4      - view matrix of the camera
//  v_camera_projection             : mat4      - projection matrix of the camera
//

in vec2             v_texcoord;
in vec4             v_world_ray;
in mat4             v_camera_world;     
in mat4             v_camera_view;
in mat4             v_camera_projection;

// ---------------- sphere tracer uniforms ------------------
//
//  Returns our depth value in a linear format.
//
//  u_max_iterations                : int      - maximum raymarching iterations
//  u_max_march_distance            : float    - maximum marching distance
//  u_min_surface_distance          : float    - minimum distance to the surface untill "collision"
//

uniform int 	    u_max_iterations;			            
uniform float 	    u_max_march_distance;
uniform float 	    u_min_surface_distance;                    

// ------------------- camera uniforms ----------------------
//
//  u_camera_position               : vec2      - location of the camera in 3D space
//  u_near_plane                    : float     - near plane of the camera
//  u_far_plane                     : float     - far plane of the camera
//

uniform vec3	    u_camera_position;
uniform float       u_near_plane;
uniform float       u_far_plane;

// ------------------- scene uniforms -----------------------
//
//  u_scene_scale                   : float     - size of the to visualize distance field
//  u_scene_offset                  : float     - expansion of the rendered surface
//  u_scene_size                    : vec4      - bounds where the scene should be rendered
//  u_scene_center                  : mat4      - center of the scene bounds
//  u_scene_voxel_grid_min_bounds   : vec3      - location of scene bounds minimum
//  u_scene_voxel_grid_max_bounds   : vec3      - location of scene bounds maximum
//  u_scene_voxel_grid_size         : vec3      - diagonal of the scene bounds ( max - min )
//  u_scene_voxel_grid_cell_size    : vec3      - cell size of each voxel within the voxel grid
//  u_scene_data                    : sampler3D - scene data that needs to be visualized
//

uniform float       u_scene_scale;
uniform float       u_scene_offset;
uniform vec3	    u_scene_size;
uniform vec3 	    u_scene_center;
uniform vec3        u_scene_voxel_grid_min_bounds;
uniform vec3        u_scene_voxel_grid_max_bounds;
uniform vec3        u_scene_voxel_grid_size;
uniform vec3        u_scene_voxel_grid_cell_size;
uniform sampler3D   u_scene_data;

// ------------------- heatmap uniforms -----------------------

uniform sampler2D   u_color_ramp;

// ---------------- linearize depth -------------------------
//
//  Returns our depth value in a linear format.
//
//  @param depth        : float     - the given depth value to linearize
//  @param near         : float     - the near plane value
//  @param far          : float     - the far plane value
//

float make_depth_linear(float depth, float near, float far) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    
    return (2.0 * near * far) / (far + near - z * (far - near));  
}

// ----------------- union operation ------------------------- 
//
// Implementation of an unified boolean operation between 2 sdf results
//
// @param d1    : float     - the first distance of the sdf result we need to compare
// @param d2    : float     - the second distance of the sdf result we need to compare
//

float op_union(float d1, float d2)
{
    return min(d1, d2);
}

// ----------------- subtraction operation ------------------ 
//
// Implementation of a subtractive boolean operation between 2 sdf results
//
// @param d1    : float     - the first distance of the sdf result we need to compare
// @param d2    : float     - the second distance of the sdf result we need to compare
//

float op_subtract(float d1, float d2)
{
    return max(-d1, d2);
}

// ----------------- intersection operation ------------------ 
//
// Implementation of an intersection boolean operation between 2 sdf results
//
// @param d1    : float     - the first distance of the sdf result we need to compare
// @param d2    : float     - the second distance of the sdf result we need to compare
//

float op_intersect(float d1, float d2)
{
    return max(d1, d2);
}

// ----------------- sd cube ------------------------- 
//
// Implementation of an exact SDF of a cube
//
// @param position  : vec3         - location of the cube in 3D space. 
// @param size      : vec3         - size of the cube.
//

float sd_cube(vec3 position, vec3 size)
{
    vec3 q = abs(position) - size;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

// ----------------- sd cube ------------------------- 
//
// Implementation of an exact SDF of a cube
//
// @param position  : vec3         - location of the cube in 3D space. 
// @param size      : vec3         - size of the cube.
// @param center    : vec3         - center of the cube.
//

float sd_cube( vec3 p, vec3 size, vec3 center ) 
{
    vec3 q = abs(p - center) - size;
    return length(max(q,0.0)) + min(max(q.x, max(q.y, q.z)),0.0);
}

// ---------------- map outershape ------------------
//
// Calculate the normal vector of a certain surface
//
// @param position      : vec3      - current marching position
//

float map_outershape(vec3 position)
{
    // Sample the outer shape
    vec3    index_in_voxel_grid     = (position - u_scene_voxel_grid_min_bounds) / u_scene_voxel_grid_cell_size;
            index_in_voxel_grid     = max( min(index_in_voxel_grid, u_scene_voxel_grid_size - vec3(1.0)), vec3(0.0));
         
    vec4    outer_shape_sample      = texture(u_scene_data, (index_in_voxel_grid / u_scene_voxel_grid_size));

    //      Specify our distance value
    float   local_distance          = outer_shape_sample.r;

    return  local_distance;
}

// ---------------- calculate normal of the outershape ------------------
//
// Calculate the normal vector of a certain surface
//
// @param position      : vec3      - current marching position
//

float map_distance_field_normal_outershape_only(vec3 position)
{
    if(sd_cube(position, u_scene_size, u_scene_center) < 1e10)
    {
        //      Calculate distance value
        float   shape_distance          = (map_outershape(position / u_scene_scale) * u_scene_scale) - u_scene_offset;

        //      We don't want to render outside our scene bounds so be subtract a box from our entire solution
        return  shape_distance;
    }

    return u_max_march_distance;
}

// ---------------- map distance field ------------------
//
// Map the given distance field
//
// @param position      : vec3      - current marching position
//

float map_distance_field(vec3 position)
{
    if(sd_cube(position, u_scene_size, u_scene_center) < u_max_march_distance)
    {
        //      Calculate distance value towards the outershape
        float   shape_distance          = (map_outershape(position / u_scene_scale) * u_scene_scale) - u_scene_offset;

        //      Store final distance
        float   final_distance;

                final_distance          = shape_distance;

        //      We don't want to render outside our scene bounds so be subtract a box from our entire solution
        return  final_distance;
    }

    return u_max_march_distance;
}

// ---------------- calculate normal ------------------
//
// Calculate the normal vector of a certain surface
//
// @param position      : vec3      - position on the surface we would like the normal from
//

vec3 calculate_normal(vec3 position)
{
    float eps = 0.002;

    const vec3 x_axis = vec3(1.0,-1.0,-1.0);
    const vec3 y_axis = vec3(-1.0, 1.0,-1.0);
    const vec3 z_axis = vec3(-1.0,-1.0, 1.0);

    const vec3 all_axes = vec3(1.0, 1.0, 1.0);
   
    vec3 normal = normalize( x_axis   * map_distance_field_normal_outershape_only( position + x_axis    * u_scene_voxel_grid_cell_size.x ) +
                             y_axis   * map_distance_field_normal_outershape_only( position + y_axis    * u_scene_voxel_grid_cell_size.y ) +
                             z_axis   * map_distance_field_normal_outershape_only( position + z_axis    * u_scene_voxel_grid_cell_size.z ) +
                             all_axes * map_distance_field_normal_outershape_only( position + all_axes  * u_scene_voxel_grid_cell_size.x ) );

    if(isnan(normal.x)||isnan(normal.y)||isnan(normal.z))
    {
        return normalize(vec3(0.0, 0.0, 0.0));
    }

    return normal;   
}

// ----------------- raymarching result ---------------------
//
//  distance_travelled          : float     - distance travelled over the ray
//  hit                         : int       - hit type
//

struct RaymarchResult
{
    float   distance_travelled;

    int     iterations;
    int     hit;
};

// ------------- raymarching algorithm ----------------
// 
// Returns the distance to a specific entiy.
// Using a sphere tracing algorihm because we will only render implicit surfaces ( a surface in euclidean space defined by an equation => F(x,y,z) ).
//
// @param rayOrigin     : vec3      - the starting location of our marching algorithm
// @param rayDirection  : vec3      - the direction we will march towards
//

RaymarchResult raymarch(vec3 rayOrigin, vec3 rayDirection)
{
    RaymarchResult result;

    result.distance_travelled = 0.0;
    result.hit = HIT_NOTHING;

    for(int i = 0; i < u_max_iterations; ++i)
    {
        if(result.distance_travelled > u_max_march_distance)
        {
            result.iterations = i;
            result.hit = HIT_MAX_MARCH_DISTANCE;
            break;
        }

        // Travel forward along the ray
        vec3 next_step_position = rayOrigin + (result.distance_travelled * rayDirection);

        // Calculate the distance to the scene from the new position
        float distance_towards_scene = map_distance_field(next_step_position);

        // When we are "very" close to the scene, break out of this loop
        if(distance_towards_scene <= u_min_surface_distance)
        {      
            float travelled_distance = result.distance_travelled + distance_towards_scene;     
            if(travelled_distance >= 0.0)
            {        
                result.distance_travelled = travelled_distance;
            }
            
            result.iterations = i;
            result.hit = HIT_SURFACE;
            break;
        }

        // Accumelate the travelled distance
        result.distance_travelled += distance_towards_scene;
    }

    return result;
}

// ----------------- render result ---------------------
//
//  distance_travelled              : float     - distance we travelled along the ray
//  iteration                       : int       - amount of iterations thourgh the raymarching loop
//  hit                             : int       - surface id we hit ( or none when we did not hit anything )
//

struct RenderResult
{
    float   distance_travelled;
    
    int     iterations;
    int     hit;
};

// --------------------- render  ----------------------
//
// Returns the output color for the current fragment
//
// @param rayOrigin         : vec3      - the starting location of our marching algorithm
// @param rayDirection      : vec3      - the direction we will march towards
//

RenderResult render(vec3 rayOrigin, vec3 rayDirection)
{
	RaymarchResult march_result = raymarch(rayOrigin, rayDirection);

    // We did not hit anything 
    //  or we hit actual geometry 
    //  or we hit max marching distance
    if(march_result.hit == HIT_NOTHING || march_result.hit == HIT_MAX_MARCH_DISTANCE)
    {
        discard;
        
        RenderResult render_result;

        render_result.distance_travelled = min(march_result.distance_travelled, u_max_march_distance);
        render_result.iterations = march_result.iterations;
        render_result.hit = march_result.hit;

        return render_result;
    }

    // We hit the surface of a shape
    // Return travelled distance
    if(march_result.hit == HIT_SURFACE)
    {
        RenderResult render_result;

        render_result.distance_travelled = min(march_result.distance_travelled, u_max_march_distance);
        render_result.iterations = march_result.iterations;
        render_result.hit = march_result.hit;

        return render_result;
    }

    // This path should actually not get hit but you never know ... 
    RenderResult render_result;

    render_result.distance_travelled = u_max_march_distance;
    render_result.iterations = u_max_iterations;
    render_result.hit = HIT_NOTHING;

    return render_result;
}

// --------------------- main -------------------------
//
// Each fragment will perform execute the raymarching algorihm to specify its output color.
// In this implementation the ray origin is equal to the given camera position,
//      the ray direction is calculated using the orientation and directional vectors ( foward, right and up ) of the camera.
//
// The overall procedure for intersection performed in main() is:
// 
//  -   Move the ray origin forward using the raymarching algorihm
//  -   Test for a collision with the scene
//  -   Return the surface position, normal and any material properties when a hit occured
//

out vec4 g_Heat;

void main(void) 
{
    // setup 
    vec3 ray_origin = u_camera_position;
    vec3 ray_direction = normalize(v_world_ray.xyz);

    // execution
    RenderResult render_result;

    render_result = render(ray_origin, ray_direction);

    // heatmap
    vec3 color = vec3(0.0, 0.0, 0.0);
    if(render_result.hit == HIT_SURFACE)
    {
        vec2 uv = vec2(float(render_result.iterations) / float(u_max_iterations), 0.0);
        color = texture(u_color_ramp, uv).xyz;
    }
    else if(render_result.hit == HIT_NOTHING || render_result.hit == HIT_MAX_MARCH_DISTANCE)
    {
        vec2 uv = vec2(1.0, 0.0);
        color = texture(u_color_ramp, uv).xyz;
    }
    else
    {
        vec2 uv = vec2(0.0, 0.0);
        color = texture(u_color_ramp, uv).xyz;
    }

    g_Heat = vec4(color, 1.0);
}