#version 330
#extension GL_ARB_separate_shader_objects : enable
precision highp int;
precision highp float;
precision highp sampler3D;

out vec4 o_Color;

in vec2 v_TexCoord;

uniform sampler2D u_Texture_G_Position;
uniform sampler2D u_Texture_G_Normal;
uniform sampler2D u_Texture_G_AlbedoSpec;

struct Light 
{
    vec3 Position;
    vec3 Color;
    
    float Linear;
    float Quadratic;
    float Radius;
};

const int NR_LIGHTS = 32;

uniform Light u_lights[NR_LIGHTS];
uniform vec3 u_view_position;

void main()
{             
    // retrieve data from gbuffer
    vec3 fragment_position = texture(u_Texture_G_Position, v_TexCoord).rgb;
    vec3 normal = texture(u_Texture_G_Normal, v_TexCoord).rgb;
    vec3 albedo = texture(u_Texture_G_AlbedoSpec, v_TexCoord).rgb;
    float specular = texture(u_Texture_G_AlbedoSpec, v_TexCoord).a;
    
    // then calculate lighting as usual
    vec3 lighting  = albedo * 0.1; // hard-coded ambient component
    vec3 view_direction  = normalize(u_view_position - fragment_position);
    for(int i = 0; i < NR_LIGHTS; ++i)
    {
                // calculate distance between light source and current fragment
        float distance = length(u_lights[i].Position - fragment_position);
        if(distance < u_lights[i].Radius)
        {
            // diffuse
            vec3 light_direction = normalize(u_lights[i].Position - fragment_position);
            vec3 diffuse = max(dot(normal, light_direction), 0.0) * albedo * u_lights[i].Color;
            // specular
            vec3 halfway_direction = normalize(light_direction + view_direction);  
            float specular_power = pow(max(dot(normal, halfway_direction), 0.0), 16.0);
            vec3 specular = u_lights[i].Color * specular_power * specular;
            // attenuation
            float distance = length(u_lights[i].Position - fragment_position);
            float attenuation = 1.0 / (1.0 + u_lights[i].Linear * distance + u_lights[i].Quadratic * distance * distance);
            diffuse *= attenuation;
            specular *= attenuation;
            lighting += diffuse + specular;   
        }     
    }

    o_Color = vec4(lighting, 1.0);
}